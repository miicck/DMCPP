from params import params
# Will generate the params.h and params.cpp files from 
# params_template.h and params_template.cpp respectively

# The warning message displayed at the top of generated files
warning  = ""
warning += "// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% \n"
warning += "// GENERATED FILE - DO NOT EDIT \n"
warning += "// Generated from {0} \n"
warning += "// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% \n"

# Generate the params.h file from params_template.h
f = open("params_template.h")
lines = f.read().split("\n")
f.close()

f = open("../params.h","w")
f.write(warning.format("gen_code/params_template.h"))
for l in lines:

    # Declare parameters as extern in params.h
    if "PYTHON_GEN_PARAMS_HERE" in l:
        ws = l[0:l.find("P")]
        l  = ws+"// Generated by gen_params.py\n"
        for p in params:
            par = params[p]
            l  += ws+"extern {0} {1};\n".format(par[0], par[1])
        l += ws+"// End generated by gen_params.py"

    f.write(l+"\n")
f.close()

# Generate the params.cpp file from params_template.cpp
f = open("params_template.cpp")
lines = f.read().split("\n")
f.close()

f = open("../params.cpp","w")
f.write(warning.format("gen_code/params_template.cpp"))
for l in lines:

    # Define parameters in params.cpp, with default value
    if "PYTHON_GEN_PARAMS_HERE" in l:
        ws = l[0:l.find("P")]
        l  = ws+"// Generated by gen_params.py\n"
        for p in params:
            par = params[p]
            l   += ws+"{0} params::{1} = {2};\n".format(par[0],par[1],par[2])
        l += ws+"// End generated by gen_params.py"

    # Parse parameters from their tag name in params.cpp
    if "PYTHON_PARSE_PARAMS_HERE" in l:
        ws = l[0:l.find("P")]
        l  = ws+"// Generated by gen_params.py\n"
        for p in params:
            par = params[p]
            if not par[4]: continue
            l += ws+"// Parse {0}\n".format(p)
            l += ws+'if (tag == "{0}")\n'.format(p)
            l += ws+"{\n"
            l += ws+"    std::stringstream ss(split[1]);\n"
            l += ws+"    ss >> params::{0};\n".format(par[1])
            l += ws+"    continue;\n"
            l += ws+"}\n\n"
        l += ws+"// End generated by gen_params.py"

    # Output params in params.cpp
    if "PYTHON_OUTPUT_PARAMS_HERE" in l:
        ws = l[0:l.find("P")]
        l  = ws+"// Generated by gen_params.py\n"
        max_len = max([len(p) for p in params])
        for p in params:
            par = params[p]
            l += ws+('progress_file << "    " << "{0:'+str(max_len)+'} : "').format(p)
            l += " << params::{0}".format(par[1])
            l += r' << "\n";'+"\n"
        l += ws+"// End generated by gen_params.py"
        
    f.write(l+"\n")
f.close()
